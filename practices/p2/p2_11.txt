练习题2.11 在练习题2.10 的 inplace_swap 函数的基础上，你决定写一段代码，实现将一个数组中的元素头尾两端依次对调。你写出下面这个函数：

void reverse_array(int a[], int cnt) {
	int first, last;

	for (first = 0, last = cnt - 1;
		first <= last;
		first++, last--)
		inplace_swap(&a[first], &a[last]);
}

当你对一个包含元素 1、2、3 和 4 的数组使用这个函数时，正如预期的那样，现在数组的元素变成了 4、3、2 和 1。不过，当你对一个包含元素 1、2、3、4和5 的数组使用这个函数时，你会惊奇地看到得到数字的元素为 5、4、0、2 和 1。实际上，你会发现这段代码对所有偶数长度的数组都能正确地工作，但是当数组的长度为奇数时，它就会把中间的元素设置成 0。
A. 对于一个长度为奇数的数组，长度 cnt = 2k + 1，函数 reverse_array 最后一次循环中，变量 first 和 last 的值分别是什么？
   都是 k。
B. 为什么这时调用函数 inplace_swap 会将数组元素设置为 0?
   因为这时数组下标都是一样的，指向同一个地址，交换的时候异或会修改这个地址的值为 0，导致两个都一样。
C. 对 reverse_array 的代码做哪些简单改动就能消除这个问题？
   将 first <= last 修改为 first < last 即可。
